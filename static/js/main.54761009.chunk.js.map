{"version":3,"sources":["context/ContactsContext.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["createContext","ContactForm","handleFormSubmit","initialValues","name","number","validationSchema","Yup","required","matches","onSubmit","autoComplete","htmlFor","type","ContactItem","id","deleteContact","useContext","ContactsContext","onClick","ContactList","contacts","map","Filter","value","handleInputChange","onChange","App","useState","setContacts","filter","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","Provider","contactId","contact","className","setSubmitting","resetForm","find","toLowerCase","alert","state","uuidv4","event","currentTarget","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEeA,G,MAAAA,2B,gBCiCAC,EA/BK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAGrB,OACE,cAAC,IAAD,CACEC,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IACnCC,iBAAkBC,IAAW,CAC3BH,KAAMG,MAAaC,SAAS,YAC5BH,OAAQE,MACLE,QARW,0GAQU,6BACrBD,SAAS,cAEdE,SAAUR,EARZ,SAUE,eAAC,IAAD,CAAMS,aAAa,MAAnB,UACE,uBAAOC,QAAQ,OAAf,kBACA,cAAC,IAAD,CAAOR,KAAK,OAAOS,KAAK,SACxB,cAAC,IAAD,CAAcT,KAAK,SACnB,uBAAOQ,QAAQ,SAAf,oBACA,cAAC,IAAD,CAAOR,KAAK,SAASS,KAAK,SAC1B,cAAC,IAAD,CAAcT,KAAK,WACnB,wBAAQS,KAAK,SAAb,+BCEOC,EAvBK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIX,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACzBW,EAAgBC,qBAAWC,GAEjC,OACE,+BACGd,EADH,KACWC,EAGT,wBAAQQ,KAAK,SAASM,QAAS,kBAAMH,EAAcD,IAAnD,wBCOSK,EAhBK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,6BACGA,EAASC,KAAI,gBAAGP,EAAH,EAAGA,GAAIX,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAAsBU,GAAIA,EAAIX,KAAMA,EAAMC,OAAQA,GAAhCU,SCSXQ,EAdA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,kBACvB,OACE,0DAEE,uBAAOZ,KAAK,OAAOW,MAAOA,EAAOE,SAAUD,QCiElCE,EA/DH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTP,EADS,KACCQ,EADD,OAEYD,mBAAS,IAFrB,mBAETE,EAFS,KAEDC,EAFC,KAUhBC,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aAEnDJ,GACFJ,EAAYI,KAEb,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUlB,MAC/C,CAACA,IA8BJ,OACE,cAACH,EAAgBsB,SAAjB,CAA0BhB,MA/CN,SAAAiB,GACpBZ,GAAY,SAAAR,GACV,OAAO,YAAIA,EAASS,QAAO,SAAAY,GAAO,OAAIA,EAAQ3B,KAAO0B,UA6CvD,SACE,sBAAKE,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CAAazC,iBAhCG,SAAC,EAAD,GAAqD,IAAlDE,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,OAAYuC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACxD,GACExB,EAASyB,MACP,SAAAJ,GAAO,OAAIA,EAAQtC,KAAK2C,gBAAkB3C,EAAK2C,iBAMjD,OAHAC,MAAM,GAAD,OAAI5C,EAAJ,6BACLyC,EAAU,CAAEzC,OAAMC,gBAClBuC,GAAc,GAIhBf,GAAY,SAAAoB,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAkB,CAAElC,GAAImC,cAAU9C,OAAMC,eAG1CwC,EAAU,CAAEzC,OAAMC,WAClBuC,GAAc,MAgBV,0CACA,cAAC,EAAD,CAAQpB,MAAOM,EAAQL,kBAdC,SAAA0B,GAAK,OAAIpB,EAAUoB,EAAMC,cAAc5B,UAe/D,cAAC,EAAD,CAAaH,SAZVA,EAASS,QAAO,SAAAY,GAAO,OAC5BA,EAAQtC,KAAK2C,cAAcM,SAASvB,EAAOiB,0BChDjDO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.54761009.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext();\n","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nconst ContactForm = ({ handleFormSubmit }) => {\n  const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={Yup.object({\n        name: Yup.string().required('Required'),\n        number: Yup.string()\n          .matches(phoneRegExp, 'Phone number is not valid')\n          .required('Required'),\n      })}\n      onSubmit={handleFormSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <label htmlFor=\"name\">Name</label>\n        <Field name=\"name\" type=\"text\" />\n        <ErrorMessage name=\"name\" />\n        <label htmlFor=\"number\">Number</label>\n        <Field name=\"number\" type=\"text\" />\n        <ErrorMessage name=\"number\" />\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  handleFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactsContext from '../../../context/ContactsContext';\n\nconst ContactItem = ({ id, name, number }) => {\n  const deleteContact = useContext(ContactsContext);\n\n  return (\n    <li>\n      {name}: {number}\n      {/* <ContactsContext.Consumer> */}\n      {/* {deleteContact => ( */}\n      <button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </button>\n      {/* )} */}\n      {/* </ContactsContext.Consumer> */}\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem/ContactItem';\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ).isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\n\nconst Filter = ({ value, handleInputChange }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={handleInputChange} />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  handleInputChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\nimport ContactsContext from './context/ContactsContext';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  const deleteContact = contactId => {\n    setContacts(contacts => {\n      return [...contacts.filter(contact => contact.id !== contactId)];\n    });\n  };\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addNewContact = ({ name, number }, { setSubmitting, resetForm }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      resetForm({ name, number });\n      setSubmitting(false);\n      return;\n    }\n\n    setContacts(state => {\n      return [...state, { id: uuidv4(), name, number }];\n    });\n\n    resetForm({ name, number });\n    setSubmitting(false);\n  };\n\n  const handleFindInputChange = event => setFilter(event.currentTarget.value);\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  return (\n    <ContactsContext.Provider value={deleteContact}>\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm handleFormSubmit={addNewContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} handleInputChange={handleFindInputChange} />\n        <ContactList contacts={getVisibleContacts()} />\n      </div>\n    </ContactsContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}